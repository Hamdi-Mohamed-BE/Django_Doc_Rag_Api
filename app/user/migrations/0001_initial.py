# Generated by Django 4.2.3 on 2025-06-03 20:12

import core.models
import core.validators
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('send_push_notifications', models.BooleanField(default=True, verbose_name='Send push notifications')),
                ('email', models.EmailField(error_messages={'unique': 'email_already_used'}, max_length=255, unique=True, validators=[core.validators.email_validator], verbose_name='Email')),
                ('phone', models.CharField(blank=True, error_messages={'unique': 'phone_already_used'}, max_length=255, null=True, unique=True, validators=[core.validators.phone_validator], verbose_name='Phone')),
                ('is_phone_verified', models.BooleanField(default=False, verbose_name='Is phone verified?')),
                ('name', models.CharField(default='', max_length=64, verbose_name='Name')),
                ('surname', models.CharField(default='', max_length=64, verbose_name='Surname')),
                ('avatar', models.ImageField(blank=True, default=None, null=True, upload_to=core.models.safe_file_path, validators=[core.validators.validate_file_size], verbose_name='Avatar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='Is email verified?')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Use this option for create Staff', verbose_name='Is staff?')),
                ('current_location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Current location')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserNotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='UserPushToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('push_id', models.CharField(max_length=255, unique=True, verbose_name='Push notification id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='push_tokens', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='notification_settings',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='user.usernotificationsettings', verbose_name='Notification settings'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
